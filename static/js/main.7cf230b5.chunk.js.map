{"version":3,"sources":["MyGlobalContext.tsx","component/list.tsx","component/weatherdisplay.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["MyGlobalContext","createContext","target","countries","setCountries","setTarget","useGlobalContext","useContext","List","props","useState","newCountry","setNewCountry","setAsTarget","element","console","log","textContent","deleteTarget","parentElement","newList","filter","item","className","onClick","replace","detectRepeat","forEach","country","type","onChange","preventDefault","value","map","icon","faTimes","WeatherDisplay","weatherData","setWeatherData","dataMounted","setDataMounted","fetchData","a","axios","request","url","then","res","data","weather","main","temp","catch","err","useEffect","cloud","src","alt","App","Provider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7cf230b5.chunk.js","sourcesContent":["import { createContext, useContext } from \"react\"\r\nexport type GlobalContent = {\r\n  target?:string|undefined\r\n  setTarget:(c: string|undefined) => void\r\n  countries: string[]\r\n  setCountries:(c: string[]) => void\r\n}\r\nexport const MyGlobalContext = createContext<GlobalContent>({\r\n  target:'Hello World',\r\n  countries: ['Hello World'], // set a default value\r\n  setCountries: () => {},\r\n  setTarget:() => {}\r\n})\r\n\r\nexport const useGlobalContext = () => useContext(MyGlobalContext)\r\n","import React, {useState} from 'react'\r\nimport { useGlobalContext } from '../MyGlobalContext'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTimes } from '@fortawesome/free-solid-svg-icons'\r\n\r\n\r\ninterface Props {\r\n    \r\n}\r\n\r\nconst List:React.FC<Props>= props => {\r\n    const { countries, setCountries, setTarget } = useGlobalContext()\r\n    const [newCountry, setNewCountry] = useState<string>(\"\")\r\n    const handleChange = (element:any)=>{\r\n        element.preventDefault()\r\n        setNewCountry(element.target.value)\r\n    }\r\n\r\n    const handleClick = ()=>{\r\n        if(newCountry.replace(/ /g,'') === \"\"){\r\n            return\r\n        }\r\n        \r\n        let detectRepeat = false\r\n       countries.forEach(country=>{\r\n            if (country == newCountry){\r\n                return detectRepeat = true\r\n            }     \r\n        })\r\n\r\n        console.log(detectRepeat) \r\n        if(!detectRepeat){\r\n            setCountries([...countries,newCountry])\r\n        }\r\n        \r\n   \r\n    }\r\n\r\n    const setAsTarget = (element:any)=>{\r\n        console.log(element.target.textContent)\r\n        setTarget(element.target.textContent)\r\n       \r\n        \r\n    }\r\n\r\n    const deleteTarget = (element:any)=>{\r\n        console.log(element.target)\r\n        console.log(element.target.parentElement.parentElement.textContent)\r\n        const newList = countries.filter(item=>{return item !== element.target.parentElement.parentElement.textContent})\r\n        setCountries(newList) \r\n    }\r\n    \r\n    return (\r\n        <div className=\"border search-bar\">\r\n        <button onClick={handleClick}>Add Country</button>\r\n        <input type=\"text\" onChange={handleChange}></input>\r\n        { countries.map(country=><div className=\"country-list\"><p onClick={setAsTarget}>{country}<FontAwesomeIcon className=\"cross-icon\"  onClick={deleteTarget} icon={faTimes} /></p></div>) }\r\n        </div>\r\n        \r\n            \r\n        \r\n    )\r\n}\r\n\r\nexport default List\r\n","import React, {useState, useEffect,FunctionComponent} from 'react'\r\nimport { useGlobalContext } from '../MyGlobalContext'\r\nimport axios, {AxiosResponse} from \"axios\"\r\n\r\n\r\ninterface Props{\r\n\r\n}\r\n\r\n\r\nconst WeatherDisplay:React.FunctionComponent<Props>= props => {\r\n    const { target,setTarget} = useGlobalContext()\r\n\r\n    interface weatherprops{\r\n        temp:string;\r\n        cloud?:string;\r\n        icon?:string;\r\n    }\r\n\r\n    const [weatherData,setWeatherData] = useState<weatherprops>({\"cloud\":\"\",\"temp\":\"\",\"icon\":\"\"})\r\n    const [dataMounted,setDataMounted] = useState<boolean>(false)\r\n\r\n    const  fetchData = async()=>{\r\n        return axios.request<any>({\r\n            url: `https://api.openweathermap.org/data/2.5/weather?q=${target}&appid=73f1ba53d1d0aefb5577f5b2f9511294&units=metric`}).then(res=>{\r\n                console.log(res.data)\r\n                setWeatherData({\"cloud\":res.data.weather[0].main,\"temp\":res.data.main.temp,\"icon\":res.data.weather[0].icon})\r\n                setDataMounted(true)\r\n            }).catch(err=>{console.log(err)\r\n                setDataMounted(false)})     \r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchData()\r\n        \r\n    }, [setTarget, target]);\r\n\r\n\r\n   \r\n\r\n    return (\r\n        <div className=\"weather-display border\">\r\n            \r\n            {dataMounted && <div className=\"weather-display-context\">\r\n            <h2>{target}</h2>\r\n                <p>{weatherData.temp} Â°C</p>\r\n                <p>{weatherData.cloud}</p>\r\n                <img src={`http://openweathermap.org/img/wn/${weatherData.icon}@2x.png`} alt=\"Weather icon\"></img>\r\n                </div>}\r\n            \r\n            \r\n            \r\n        </div>\r\n    )\r\n\r\n    \r\n\r\n}\r\n\r\n\r\nexport default WeatherDisplay;","import './App.css';\nimport React, { useState } from 'react'\nimport { MyGlobalContext } from './MyGlobalContext'\nimport List from './component/list';\nimport WeatherDisplay from './component/weatherdisplay';\nimport axios, {AxiosResponse} from \"axios\"\n\n\nfunction App() {\n  const [countries, setCountries] = useState<string[]>(['London',\"York\"])\n  const [target, setTarget] = useState<string|undefined>(countries[0])\n\n  \n  return (\n    <div className=\"App\">\n      <body>\n      <MyGlobalContext.Provider value= {{ countries, setCountries, target, setTarget }}>\n        <div className=\"weather-box\">\n          <List></List>\n          <WeatherDisplay></WeatherDisplay>\n        </div>\n      </MyGlobalContext.Provider>\n      </body>\n  \n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}